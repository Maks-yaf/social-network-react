{"version":3,"file":"static/js/343.616910c6.chunk.js","mappings":"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","sources":["Utils/Validators/validators.js","components/Common/FormsControls/FormsControls.js","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusOnHooks.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/AddPost/AddPost.module.css?9fed","components/Profile/MyPosts/AddPost/AddPost.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","webpack://my-app/./src/components/Common/FormsControls/FormsControls.module.css?8edf"],"sourcesContent":["export const required = (value) => {\r\n   if (value) return undefined;\r\n\r\n   return \"Field are required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./FormsControls.module.css\"\r\n\r\nexport const FormControl = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + ( hasError? s.error : \" \") }>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span> }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__FXlaS\",\"avatar\":\"ProfileInfo_avatar__3uqWw\",\"mainImg\":\"ProfileInfo_mainImg__b5Iu6\"};","// extracted by mini-css-extract-plugin\nexport default {\"haha\":\"ProfileStatus_haha__O11PR\"};","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\n\r\nconst ProfileStatusOnHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode =() => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode =() => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = e => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>Мой статус</div>\r\n            {!editMode &&\r\n                <div className={s.haha}>\r\n                    <span onDoubleClick={activateEditMode}>{status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true}\r\n                           onChange={onStatusChange}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}\r\n                           />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusOnHooks;\r\n\r\n// const ProfileStatus = (props) => {\r\n//     //локальный стейт компоненты\r\n//     const [localState, setLocalState] = React.useState({\r\n//         editMode: false,\r\n//         status: props.status,\r\n//     });\r\n//     const activateEditMode = () => {\r\n//         setLocalState({ ...localState, editMode: true });\r\n//     };\r\n//\r\n//     const deactivateEditMode = () => {\r\n//         setLocalState({ ...localState, editMode: false });\r\n//         props.updateStatus(localState.status);\r\n//     };\r\n//\r\n//     const onStatusChange = (event) => {\r\n//         setLocalState({ ...localState, status: event.currentTarget.value });\r\n//         console.log(event.currentTarget.value);\r\n//         props.changeUserStatus(localState.status);\r\n//     };\r\n//\r\n//     return (\r\n//         <div className={s.status}>\r\n//             {!localState.editMode && (\r\n//                 <div>\r\n//                     <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n//                 </div>\r\n//             )}\r\n//             {localState.editMode && (\r\n//                 <div>\r\n//                     <input\r\n//                         autoFocus={true}\r\n//                         onBlur={deactivateEditMode}\r\n//                         value={localState.status}\r\n//                         onChange={onStatusChange}\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n// export default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = e => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>Мой статус</div>\r\n                {!this.state.editMode &&\r\n                    <div className={s.haha}>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.state.status || \"No status\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}  autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n// const ProfileStatus = (props) => {\r\n//     //локальный стейт компоненты\r\n//     const [localState, setLocalState] = React.useState({\r\n//         editMode: false,\r\n//         status: props.status,\r\n//     });\r\n//     const activateEditMode = () => {\r\n//         setLocalState({ ...localState, editMode: true });\r\n//     };\r\n//\r\n//     const deactivateEditMode = () => {\r\n//         setLocalState({ ...localState, editMode: false });\r\n//         props.updateStatus(localState.status);\r\n//     };\r\n//\r\n//     const onStatusChange = (event) => {\r\n//         setLocalState({ ...localState, status: event.currentTarget.value });\r\n//         console.log(event.currentTarget.value);\r\n//         props.changeUserStatus(localState.status);\r\n//     };\r\n//\r\n//     return (\r\n//         <div className={s.status}>\r\n//             {!localState.editMode && (\r\n//                 <div>\r\n//                     <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n//                 </div>\r\n//             )}\r\n//             {localState.editMode && (\r\n//                 <div>\r\n//                     <input\r\n//                         autoFocus={true}\r\n//                         onBlur={deactivateEditMode}\r\n//                         value={localState.status}\r\n//                         onChange={onStatusChange}\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n// export default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusOnHooks from \"./ProfileStatusOnHooks\";\r\nimport userPhoto from \"../../../asets/images/defoltAvatar.png\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.mainImg}\r\n                     src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRieAeypWa5G63Ggeofo-8B4TzCjSJd-nyH8UDV3nwK-g&s'/>\r\n            </div>\r\n            <div className={s.avatar}>\r\n                <img src={props.profile.photos.small !== null ? props.profile.photos.small : userPhoto}  alt='profile'/>\r\n                <div className={s.discriptionBlock}><u>{props.fullName}</u></div>\r\n                <div className={s.discriptionBlock}>{props.description}</div>\r\n                <ProfileStatusOnHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__XxNhL\",\"posts\":\"MyPosts_posts__jmw8G\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"AddPost_item__Nis5W\",\"like\":\"AddPost_like__qVy0d\"};","import React from 'react';\r\nimport s from './AddPost.module.css';\r\n\r\nconst AddPost = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://img.freepik.com/premium-photo/cute-asian-girl-kawaii-anime-avatar-ai-generative-art_225753-9233.jpg\" ></img>\r\n            {props.message}\r\n            <div className={s.like}>\r\n                like bitch {props.like}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPost;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport AddPost from \"./AddPost/AddPost\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts =props => {\r\n    let postsElement = [...props.posts].reverse().map((p) => <AddPost message={p.message} like={p.like} key={p.id}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.postTextArea);\r\n    };\r\n\r\n    return (\r\n\r\n        <div className={s.postBlock}>\r\n            <h3> My post </h3>\r\n            <PostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'postTextArea'}\r\n                       component={Textarea}\r\n                       placeholder={\"Hi, how are you\"}\r\n                       validate={[required, maxLengthCreator(10)]}/>\r\n            </div>\r\n            <div>\r\n                <button type='submit'>Add post</button>\r\n                <button type='submit'>Remove</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst PostFormRedux = reduxForm({form: \"post\"})(PostForm)\r\n\r\nexport default MyPosts;\r\n\r\n// Старый и новый код для форм\r\n// <h3> My post </h3>\r\n// <div>\r\n//     <div>\r\n//                     <textarea onChange={onPostChange}\r\n//                               ref={newPostElement}\r\n//                               value={props.newPostText}/>\r\n//     </div>\r\n//     <div>\r\n//         <button onClick={onAddPost}>Add post</button>\r\n//         <button>Remove</button>\r\n//     </div>\r\n// </div>\r\n//\r\n// <PostForm onAddPost={onAddPost}\r\n//       onPostChange={onPostChange}\r\n//       newPostText={props.newPostText}\r\n//       newPostElement={newPostElement}\r\n// />\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../Redax/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts,\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (postTextArea) => {\r\n            dispatch(addPostActionCreator(postTextArea))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         fullName={props.fullName}\r\n                         description={props.description}\r\n                         status={props.status}\r\n\r\n                         updateStatus={props.updateStatus}\r\n\r\n\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, profileInfo, updateStatus} from \"../../Redax/Profile-reducer\";\r\nimport {useParams} from 'react-router-dom'\r\nimport {compose} from \"redux\";\r\n\r\nfunction ProfileContainer(props) {\r\n    let {userId} = useParams();\r\n    if (!userId) {\r\n        userId = props.authUserId;\r\n        if (!userId) {\r\n            window.location.href = '/login';\r\n        }\r\n    }\r\n\r\n    useEffect(() => {props.profileInfo(userId)},  [userId]);\r\n    props.getStatus(userId);\r\n\r\n\r\n    // console.log(\"RENDER PROFILE\")\r\n    return (\r\n        <>\r\n        <div>\r\n            <Profile profile={props.profile}\r\n                     fullName={props.fullName}\r\n                     description={props.description}\r\n                     status={props.status}\r\n\r\n                     updateStatus={props.updateStatus}\r\n            />\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    // console.log(\"MapStateToPropsProfile PROFILE\")\r\n    return ( {\r\n                 profile: state.profilePage.profile,\r\n                 fullName: state.profilePage.fullName,\r\n                 description: state.profilePage.description,\r\n                 status: state.profilePage.status,\r\n                 authUserId: state.auth.id,\r\n                 isAuth: state.auth.isAuth,\r\n             })\r\n\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {profileInfo, getStatus, updateStatus}),\r\n)(ProfileContainer)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__uxP10\",\"error\":\"FormsControls_error__FRBmD\",\"formSummaryError\":\"FormsControls_formSummaryError__4FbEs\"};"],"names":["required","value","maxLengthCreator","maxLength","length","concat","FormControl","_ref","input","meta","props","hasError","touched","error","_jsxs","className","s","formControl","children","_jsx","Textarea","restProps","Input","editMode","setEditMode","useState","status","setStatus","useEffect","_Fragment","onDoubleClick","activateEditMode","autoFocus","onChange","e","currentTarget","onBlur","deactivateEditMode","updateStatus","React","profile","src","photos","small","userPhoto","alt","fullName","description","ProfileStatusOnHooks","Preloader","message","like","PostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","placeholder","validate","type","postsElement","posts","reverse","map","p","AddPost","id","values","addPost","postTextArea","connect","state","newPostText","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","compose","authUserId","auth","isAuth","profileInfo","getStatus","userId","useParams","window","location","href","Profile"],"sourceRoot":""}