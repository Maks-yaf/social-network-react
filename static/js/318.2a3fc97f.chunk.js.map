{"version":3,"file":"static/js/318.2a3fc97f.chunk.js","mappings":"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","sources":["Utils/Validators/validators.js","components/Common/FormsControls/FormsControls.js","components/Login/Login.jsx","webpack://my-app/./src/components/Common/FormsControls/FormsControls.module.css?8edf"],"sourcesContent":["export const required = (value) => {\r\n   if (value) return undefined;\r\n\r\n   return \"Field are required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {TextField} from \"@mui/material\";\r\nimport Box from '@mui/material/Box'\r\nimport Input from '@mui/material/Input';\r\n\r\n\r\nexport const FormControl = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div >\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span style={{color: 'red'}}>{meta.error}</span> }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <Box sx={{\r\n                width: 500,\r\n                maxWidth: '100%',\r\n            }}>\r\n        <TextField\r\n            className={s.textarea}\r\n            fullWidth\r\n            {...input}\r\n            {...restProps}\r\n            id=\"filled-basic\"\r\n            label=\"\"\r\n            variant=\"filled\" />\r\n        </Box>\r\n    </FormControl>\r\n}\r\n\r\nexport const Inputarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n\r\n        <Input\r\n            className={s.input}\r\n            {...input}\r\n            {...restProps} />\r\n\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validate, component, props = {}, text = \"\" ) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validate}\r\n                   component={component}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Inputarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/Auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport s from \"../../../src/components/Common/FormsControls/FormsControls.module.css\"\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.globalForm}>\r\n            <div>\r\n                <Field\r\n                    className={s.dialogTextarea}\r\n                    name={'email'}\r\n                       placeholder={'email'}\r\n                       component={Inputarea}\r\n                       validate={[required, maxLengthCreator(50)]}/>\r\n            </div>\r\n            <div>\r\n                <Field name={'password'}\r\n                       className={s.dialogTextarea}\r\n                       placeholder={'password'}\r\n                       type={'password'}\r\n                       component={Inputarea}\r\n                       validate={[required, maxLengthCreator(50)]}/>\r\n            </div>\r\n            <div className={s.checkBoxForm}>\r\n                <Field name={'rememberMe'}\r\n                       component={'input'}\r\n                       type={'checkbox'}/>\r\n                Remember me\r\n            </div>\r\n            {props.captchaUrl\r\n                && <img src={props.captchaUrl}/> }\r\n            {props.captchaUrl\r\n                && <div>\r\n                <Field name={'captcha'}\r\n                       placeholder={'Symbols from image'}\r\n                       component={Inputarea}\r\n                       validate={[required, maxLengthCreator(10)]}/>\r\n            </div>}\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <Button\r\n                    type='submit'\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    variant=\"contained\">\r\n                    LOGIN\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return (\r\n            <Navigate to={\"/profile\"}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={s.globalForm}>LOGIN</h1>\r\n            <ReduxLoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__uxP10\",\"error\":\"FormsControls_error__FRBmD\",\"formSummaryError\":\"FormsControls_formSummaryError__4FbEs\",\"globalForm\":\"FormsControls_globalForm__C-tsj\",\"checkBoxForm\":\"FormsControls_checkBoxForm__Ntvty\",\"dialogTextarea\":\"FormsControls_dialogTextarea__Mcv3u\",\"input\":\"FormsControls_input__bhmBc\",\"textarea\":\"FormsControls_textarea__+BvRr\"};"],"names":["required","value","maxLengthCreator","maxLength","length","concat","FormControl","_ref","input","meta","props","hasError","touched","error","_jsxs","children","_jsx","style","color","Textarea","restProps","Box","sx","width","maxWidth","TextField","className","s","textarea","fullWidth","id","label","variant","Inputarea","Input","createField","placeholder","name","validate","component","arguments","undefined","text","Field","ReduxLoginForm","reduxForm","form","onSubmit","handleSubmit","globalForm","dialogTextarea","type","checkBoxForm","captchaUrl","src","formSummaryError","Button","size","connect","state","auth","isAuth","login","Navigate","to","formData","email","password","rememberMe","captcha"],"sourceRoot":""}