{"version":3,"file":"static/js/438.e5e0e986.chunk.js","mappings":"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","sources":["Utils/Validators/validators.js","components/Common/FormsControls/FormsControls.js","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileChangeForm.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/AddPost/AddPost.module.css?9fed","components/Profile/MyPosts/AddPost/AddPost.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","webpack://my-app/./src/components/Common/FormsControls/FormsControls.module.css?8edf"],"sourcesContent":["export const required = (value) => {\r\n   if (value) return undefined;\r\n\r\n   return \"Field are required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport {TextField} from \"@mui/material\";\r\nimport Box from '@mui/material/Box'\r\nimport Input from '@mui/material/Input';\r\n\r\n\r\nexport const FormControl = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div >\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span style={{color: 'red'}}>{meta.error}</span> }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <Box sx={{\r\n                width: 500,\r\n                maxWidth: '100%',\r\n            }}>\r\n        <TextField\r\n            className={s.textarea}\r\n            fullWidth\r\n            {...input}\r\n            {...restProps}\r\n            id=\"filled-basic\"\r\n            label=\"\"\r\n            variant=\"filled\" />\r\n        </Box>\r\n    </FormControl>\r\n}\r\n\r\nexport const Inputarea = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n\r\n        <Input\r\n            className={s.input}\r\n            {...input}\r\n            {...restProps} />\r\n\r\n    </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validate, component, props = {}, text = \"\" ) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validate}\r\n                   component={component}\r\n                   {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__FXlaS\",\"avatar\":\"ProfileInfo_avatar__3uqWw\",\"mainImg\":\"ProfileInfo_mainImg__b5Iu6\",\"contacts\":\"ProfileInfo_contacts__qOguk\",\"main\":\"ProfileInfo_main__062Qt\",\"button\":\"ProfileInfo_button__l5uWY\",\"descriptionForm\":\"ProfileInfo_descriptionForm__l-JXp\"};","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Inputarea, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from '../../Common/FormsControls/FormsControls.module.css';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst ProfileChangeFrom = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.descriptionForm}>\r\n            {props.error && <div className={style.formSummaryError}>\r\n            {props.error}\r\n        </div>}\r\n            <div>\r\n                <u>Change Profile:</u>\r\n            </div>\r\n            <div>\r\n                <b>My nickname:</b> {createField(\"My nickname\", \"fullName\", [], Inputarea)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>\r\n                {createField(\"\", \"lookingForAJob\", [], Inputarea, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b> {props.profile.lookingForAJobDescription}\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea,)}\r\n            </div>\r\n            <div>\r\n                <b>About Me:</b> {props.profile.aboutMe}\r\n                {createField(\"About Me\", \"aboutMe\", [], Textarea,)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={s.contacts}>\r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Inputarea)}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    onClick={ () => {}}\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    type='submit'\r\n                >\r\n                    Save\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProfileChangeFromReduxForm = reduxForm({form: 'edit-profile', destroyOnUnmount: false})(ProfileChangeFrom)\r\n\r\nexport default ProfileChangeFromReduxForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__XxNhL\",\"posts\":\"MyPosts_posts__jmw8G\",\"main\":\"MyPosts_main__EAx32\",\"postTextarea\":\"MyPosts_postTextarea__SR-AC\",\"button\":\"MyPosts_button__8SJQQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"AddPost_item__Nis5W\",\"like\":\"AddPost_like__qVy0d\",\"message\":\"AddPost_message__o6uDp\",\"main\":\"AddPost_main__VkEpJ\",\"photo\":\"AddPost_photo__uV+-X\"};","import React from 'react';\r\nimport s from './AddPost.module.css';\r\nimport MyPhoto from \"../../../../assets/images/MyPhoto.jpg\";\r\n\r\n\r\nconst AddPost = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.message}>\r\n                <div className={s.main}>I would like to say that:</div>\r\n                {props.message}</div>\r\n            <div className={s.photo}>\r\n                <img src={MyPhoto} alt='profile'/>\r\n            </div>\r\n\r\n            <div className={s.like}>\r\n                <h7>like:</h7> {props.like}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPost;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport AddPost from \"./AddPost/AddPost\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst MyPosts =props => {\r\n    let postsElement = [...props.posts,]\r\n        .reverse()\r\n        .map((p) => <AddPost key={p.id} message={p.message} like={p.like} profile={props.profile} />)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.postTextArea);\r\n    };\r\n\r\n    return (\r\n\r\n        <div className={s.postBlock}>\r\n            <h3 className={s.main}> My post </h3>\r\n            <PostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst PostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.postTextarea}\r\n                    name={'postTextArea'}\r\n                    component={Textarea}\r\n                    placeholder={\"Hi, how are you\"}\r\n                    validate={[required, maxLengthCreator(50)]}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    type='submit'\r\n                >\r\n                    Add post\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst PostFormRedux = reduxForm({form: \"post\"})(PostForm)\r\n\r\nexport default MyPosts;\r\n\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator, profileInfo} from \"../../../Redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        posts: state.profilePage.posts,\r\n        profile: state.profilePage.profile,\r\n    }\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (postTextArea) => {\r\n            dispatch(addPostActionCreator(postTextArea))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {/*<ProfileInfo profile={props.profile}*/}\r\n            {/*             status={props.status}*/}\r\n            {/*             isOwnerID={props.isOwnerID}*/}\r\n            {/*             userPageId={props.userPageId}*/}\r\n\r\n            {/*             updateStatus={props.updateStatus}*/}\r\n            {/*             updatePhoto={props.updatePhoto}*/}\r\n            {/*             saveProfile={props.saveProfile}*/}\r\n            {/*/>*/}\r\n            {props.isOwnerID === props.userPageId\r\n                ? <MyPostsContainer/>\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, profileInfo, saveProfile, updatePhoto, updateStatus} from \"../../Redux/Profile-reducer\";\r\nimport {useParams} from 'react-router-dom'\r\nimport {compose} from \"redux\";\r\n\r\nfunction ProfileContainer(props) {\r\n    let {userId} = useParams();\r\n    if (!userId) {\r\n        userId = props.authUserId;\r\n        if (!userId) {\r\n            userId = 31300 ;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.profileInfo(userId)\r\n    }, [userId]);\r\n    props.getStatus(userId);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Profile profile={props.profile}\r\n                         status={props.status}\r\n                         isOwnerID={props.authUserId}\r\n                         userPageId={userId}\r\n\r\n                         updateStatus={props.updateStatus}\r\n                         updatePhoto={props.updatePhoto}\r\n                         saveProfile={props.saveProfile}\r\n\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        {profileInfo, getStatus, updateStatus, updatePhoto, saveProfile}\r\n    ),\r\n)(ProfileContainer)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__uxP10\",\"error\":\"FormsControls_error__FRBmD\",\"formSummaryError\":\"FormsControls_formSummaryError__4FbEs\",\"globalForm\":\"FormsControls_globalForm__C-tsj\",\"checkBoxForm\":\"FormsControls_checkBoxForm__Ntvty\",\"dialogTextarea\":\"FormsControls_dialogTextarea__Mcv3u\",\"input\":\"FormsControls_input__bhmBc\",\"textarea\":\"FormsControls_textarea__+BvRr\"};"],"names":["required","value","maxLengthCreator","maxLength","length","concat","FormControl","_ref","input","meta","props","hasError","touched","error","_jsxs","children","_jsx","style","color","Textarea","restProps","Box","sx","width","maxWidth","TextField","className","s","textarea","fullWidth","id","label","variant","Inputarea","Input","createField","placeholder","name","validate","component","arguments","undefined","text","Field","reduxForm","form","destroyOnUnmount","onSubmit","handleSubmit","formSummaryError","type","profile","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","Button","onClick","size","message","src","MyPhoto","alt","like","PostFormRedux","postsElement","posts","reverse","p","AddPost","values","addPost","postTextArea","connect","state","newPostText","profilePage","dispatch","addPostActionCreator","MyPosts","isOwnerID","userPageId","MyPostsContainer","compose","status","authUserId","auth","isAuth","profileInfo","getStatus","updateStatus","updatePhoto","saveProfile","userId","useParams","useEffect","_Fragment","Profile"],"sourceRoot":""}